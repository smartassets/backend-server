version: '3.3'

services:
  mosquitto:
    image: eclipse-mosquitto:1.5.5
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
    ports:
      - "1883:1883"
  zookeeper:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog
  kafka:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29094:29094"
    environment:
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: LISTENER_BOB://kafka:29092,LISTENER_FRED://kafka:9092,LISTENER_ALICE://kafka:29094
      KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://kafka:29092,LISTENER_FRED://kafka:9092,LISTENER_ALICE://never-gonna-give-you-up:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT,LISTENER_ALICE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.3.0
    hostname: kafka-connect
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      KAFKA_LOG4J_LOGGERS: "kafka: DEBUG"
      KAFKA_LOG4J_ROOT_LOGLEVEL: DEBUG
      KAFKA_TOOLS_LOG4J_LOGLEVEL: DEBUG
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./setup/jars/:/etc/kafka-connect/jars/
    depends_on:
      - zookeeper
      - kafka
      - mosquitto

  postgres:
    image: "postgres"
    container_name: postgres
    hostname: postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: iloveiot
    volumes:
      - pgdata:/var/lib/postgresql/data
      - pgconf:/etc/postgresql
      - pglog:/var/log/postgresql
      # - my_dbdata:/usr/local/var/postgres/data
  cadvisor:
    image: google/cadvisor:latest
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080

  prometheus:
    image: prom/prometheus:v2.1.0
    container_name: prometheus
    volumes:
     - ./setup/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
     - 9090:9090
    depends_on:
     - exporter
  exporter:
    image: prom/node-exporter:latest
    container_name: exporter
    ports:
     - "9100:9100"
    depends_on:
     - postgres
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
     - "3000:3000"
    depends_on:
      - prometheus
  sqlagent:
    image: dbhi/sql-agent
  prometheussql:
    image: dbhi/prometheus-sql
    links:
      - sqlagent:sqlagent
    command:
      -service http://sqlagent:5000
      -queries /queries.yml
    ports:
      - 9191:9191
    hostname: prometheussql
    volumes:
      - ./setup/queries.yml:/queries.yml
  monitoring:
    container_name: iot-monitoring
    build:
      context: backend/
      dockerfile: Dockerfile.monitoring
    environment:
      spring.datasource.url: jdbc:postgresql://postgres:5432/postgres
      spring.datasource.username: postgres
      spring.datasource.password: iloveiot
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
      spring.jpa.hibernate.ddl-auto: update
      server.port: 8082
    image: iot-monitoring:latest
    ports:
      - 8082:8082
    depends_on:
      - postgres
# volumes:
#   my_dbdata:
volumes:
  pgdata:
    driver: local
  pgconf:
    driver: local
  pglog:
    driver: local
